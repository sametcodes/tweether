/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TweetherInterface extends utils.Interface {
  functions: {
    "createTweet(string,bool,uint256)": FunctionFragment;
    "deleteTweet(uint256)": FunctionFragment;
    "getReplies(uint256)": FunctionFragment;
    "getTotalTweet()": FunctionFragment;
    "getTweet(uint256)": FunctionFragment;
    "lastTweetId()": FunctionFragment;
    "likeTweet(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createTweet"
      | "deleteTweet"
      | "getReplies"
      | "getTotalTweet"
      | "getTweet"
      | "lastTweetId"
      | "likeTweet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createTweet",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTweet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReplies",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTweet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTweet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTweetId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "likeTweet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createTweet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteTweet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReplies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTweet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTweet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTweetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "likeTweet", data: BytesLike): Result;

  events: {
    "CreateTweet(uint256,address,string)": EventFragment;
    "DeleteTweet(uint256,address)": EventFragment;
    "LikeTweet(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateTweet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeleteTweet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LikeTweet"): EventFragment;
}

export interface CreateTweetEventObject {
  tweetId: BigNumber;
  sender: string;
  text: string;
}
export type CreateTweetEvent = TypedEvent<
  [BigNumber, string, string],
  CreateTweetEventObject
>;

export type CreateTweetEventFilter = TypedEventFilter<CreateTweetEvent>;

export interface DeleteTweetEventObject {
  tweetId: BigNumber;
  sender: string;
}
export type DeleteTweetEvent = TypedEvent<
  [BigNumber, string],
  DeleteTweetEventObject
>;

export type DeleteTweetEventFilter = TypedEventFilter<DeleteTweetEvent>;

export interface LikeTweetEventObject {
  tweetId: BigNumber;
  sender: string;
}
export type LikeTweetEvent = TypedEvent<
  [BigNumber, string],
  LikeTweetEventObject
>;

export type LikeTweetEventFilter = TypedEventFilter<LikeTweetEvent>;

export interface Tweether extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TweetherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createTweet(
      text: PromiseOrValue<string>,
      reply: PromiseOrValue<boolean>,
      repliedTo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteTweet(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getReplies(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTotalTweet(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTweet(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber[],
        BigNumber,
        boolean,
        string,
        BigNumber,
        boolean,
        BigNumber
      ]
    >;

    lastTweetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    likeTweet(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createTweet(
    text: PromiseOrValue<string>,
    reply: PromiseOrValue<boolean>,
    repliedTo: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteTweet(
    tweetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getReplies(
    tweetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTotalTweet(overrides?: CallOverrides): Promise<BigNumber>;

  getTweet(
    tweetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber[],
      BigNumber,
      boolean,
      string,
      BigNumber,
      boolean,
      BigNumber
    ]
  >;

  lastTweetId(overrides?: CallOverrides): Promise<BigNumber>;

  likeTweet(
    tweetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createTweet(
      text: PromiseOrValue<string>,
      reply: PromiseOrValue<boolean>,
      repliedTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteTweet(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getReplies(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTotalTweet(overrides?: CallOverrides): Promise<BigNumber>;

    getTweet(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber[],
        BigNumber,
        boolean,
        string,
        BigNumber,
        boolean,
        BigNumber
      ]
    >;

    lastTweetId(overrides?: CallOverrides): Promise<BigNumber>;

    likeTweet(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CreateTweet(uint256,address,string)"(
      tweetId?: null,
      sender?: null,
      text?: null
    ): CreateTweetEventFilter;
    CreateTweet(
      tweetId?: null,
      sender?: null,
      text?: null
    ): CreateTweetEventFilter;

    "DeleteTweet(uint256,address)"(
      tweetId?: null,
      sender?: null
    ): DeleteTweetEventFilter;
    DeleteTweet(tweetId?: null, sender?: null): DeleteTweetEventFilter;

    "LikeTweet(uint256,address)"(
      tweetId?: null,
      sender?: null
    ): LikeTweetEventFilter;
    LikeTweet(tweetId?: null, sender?: null): LikeTweetEventFilter;
  };

  estimateGas: {
    createTweet(
      text: PromiseOrValue<string>,
      reply: PromiseOrValue<boolean>,
      repliedTo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteTweet(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getReplies(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTweet(overrides?: CallOverrides): Promise<BigNumber>;

    getTweet(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTweetId(overrides?: CallOverrides): Promise<BigNumber>;

    likeTweet(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createTweet(
      text: PromiseOrValue<string>,
      reply: PromiseOrValue<boolean>,
      repliedTo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteTweet(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getReplies(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTweet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTweet(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTweetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    likeTweet(
      tweetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
